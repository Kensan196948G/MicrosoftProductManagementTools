# Microsoft 365 Management Tools - Helm Values Configuration
# Enterprise-grade Kubernetes deployment configuration

# Global settings
global:
  imageRegistry: ghcr.io
  imagePullSecrets: []
  storageClass: ""

# Application image configuration
image:
  repository: ghcr.io/your-org/microsoftproductmanagementtools
  tag: "latest"
  pullPolicy: IfNotPresent

# Deployment configuration
deployment:
  type: "standard"  # standard, canary, blue-green
  version: "blue"   # blue, green (for blue-green deployments)
  canaryWeight: 10  # percentage for canary deployments

# Replica configuration
replicaCount: 2
minReplicas: 2
maxReplicas: 10

# Environment configuration
environment: production  # development, staging, production

# Service configuration
service:
  type: LoadBalancer
  port: 80
  targetPort: 8000
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /health

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: microsoft365tools.company.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: m365-tools-tls
      hosts:
        - microsoft365tools.company.com

# Resource configuration
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Auto-scaling configuration
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Node selection
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - m365-tools
          topologyKey: kubernetes.io/hostname

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

podSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true

# Persistent storage
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# Configuration
config:
  # Application configuration
  logLevel: "info"
  debug: false
  
  # Microsoft 365 configuration
  microsoft365:
    tenantId: ""
    clientId: ""
    # clientSecret is managed via secrets
  
  # Database configuration
  database:
    host: "postgres"
    port: 5432
    name: "microsoft365_tools"
    # credentials managed via secrets
  
  # Redis configuration
  redis:
    host: "redis"
    port: 6379
    # password managed via secrets

# Secrets configuration
secrets:
  # These values should be provided via external secret management
  # or override values
  microsoftClientSecret: ""
  databasePassword: ""
  secretKey: ""
  jwtSecretKey: ""
  redisPassword: ""

# External secrets (Azure Key Vault integration)
externalSecrets:
  enabled: false
  secretStore:
    provider: "azure"
    auth:
      secretRef:
        clientId:
          name: "azure-secret"
          key: "client-id"
        clientSecret:
          name: "azure-secret"
          key: "client-secret"
        tenantId:
          name: "azure-secret"
          key: "tenant-id"
    config:
      vaultUrl: "https://your-keyvault.vault.azure.net/"

# Health checks
healthCheck:
  enabled: true
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 30s
    path: /metrics
    labels: {}
  prometheusRule:
    enabled: true
    namespace: monitoring
    labels: {}

# Network policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8000
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 443  # HTTPS
        - protocol: TCP
          port: 80   # HTTP
        - protocol: TCP
          port: 5432 # PostgreSQL
        - protocol: TCP
          port: 6379 # Redis
        - protocol: UDP
          port: 53   # DNS

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "30d"
  storage:
    type: "azure"  # azure, s3, local
    azure:
      storageAccount: ""
      containerName: "m365-backups"
    s3:
      bucketName: ""
      region: "us-east-1"

# Additional volumes
volumes: []
# - name: temp-volume
#   emptyDir: {}

volumeMounts: []
# - name: temp-volume
#   mountPath: /tmp

# Additional environment variables
extraEnv: []
# - name: CUSTOM_VAR
#   value: "custom-value"

# Additional containers (sidecars)
extraContainers: []

# Init containers
initContainers: []

# Additional labels
additionalLabels: {}

# Additional annotations
additionalAnnotations: {}

# Argo Rollouts configuration
rollouts:
  enabled: false  # Enable for advanced Blue-Green/Canary deployments
  analysis:
    prometheusServer: "prometheus:9090"
    interval: "5m"
    successThreshold: 0.95
    errorThreshold: 0.05
    latencyThreshold: 0.5

# Blue-Green deployment specific
blueGreen:
  enabled: false
  activeVersion: "blue"
  autoPromotionEnabled: false
  scaleDownDelaySeconds: 30
  
# Canary deployment specific
canary:
  enabled: false
  maxSurge: "25%"
  scaleDownDelaySeconds: 30
  steps:
    - setWeight: 10
    - pause: {duration: 5m}
    - setWeight: 20
    - pause: {duration: 5m}
    - setWeight: 50
    - pause: {duration: 10m}
    - setWeight: 100

# Rollback configuration
rollback:
  enabled: true
  historyLimit: 10
  
# Maintenance mode
maintenance:
  enabled: false
  message: "System under maintenance"