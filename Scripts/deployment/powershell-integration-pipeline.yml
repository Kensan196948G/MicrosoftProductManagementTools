# PowerShell 7 + Microsoft 365 Integration Pipeline
# DevOps EngineerÂ∞ÇÁî® - PowerShell ‚Üí Python ÁßªË°åÂØæÂøúCI/CD„Éë„Ç§„Éó„É©„Ç§„É≥
# Dev04 (PowerShell/Microsoft 365 Specialist) ÊãÖÂΩìÈ†òÂüü

name: PowerShell Integration Pipeline

on:
  push:
    paths:
      - 'Scripts/**/*.ps1'
      - 'Scripts/**/*.psm1'
      - 'Apps/**/*.ps1'
      - 'TestScripts/**/*.ps1'
      - 'Docker/powershell-alpine.Dockerfile'
  pull_request:
    paths:
      - 'Scripts/**/*.ps1'
      - 'Scripts/**/*.psm1'
      - 'Apps/**/*.ps1'
  workflow_dispatch:
    inputs:
      powershell_mode:
        description: 'PowerShell execution mode'
        required: true
        default: 'hybrid'
        type: choice
        options:
          - hybrid
          - standalone
          - bridge
      test_microsoft365:
        description: 'Test Microsoft 365 connectivity'
        type: boolean
        default: false

env:
  POWERSHELL_VERSION: '7.4.1'
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================================================
  # PowerShell 7 Áí∞Â¢É„Éª„É¢„Ç∏„É•„Éº„É´Ê§úË®º
  # ============================================================================
  powershell-validation:
    name: ‚ö° PowerShell 7 + Microsoft 365 Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      powershell-ready: ${{ steps.powershell-check.outputs.ready }}
      modules-installed: ${{ steps.modules-check.outputs.installed }}
      
    steps:
    - name: üì• Repository Checkout
      uses: actions/checkout@v4
      
    - name: ‚ö° Install PowerShell 7
      shell: bash
      run: |
        echo "üîß Installing PowerShell ${{ env.POWERSHELL_VERSION }}..."
        
        # Download and install PowerShell 7
        wget -q https://github.com/PowerShell/PowerShell/releases/download/v${{ env.POWERSHELL_VERSION }}/powershell-${{ env.POWERSHELL_VERSION }}-linux-x64.tar.gz
        sudo mkdir -p /opt/microsoft/powershell/7
        sudo tar zxf powershell-${{ env.POWERSHELL_VERSION }}-linux-x64.tar.gz -C /opt/microsoft/powershell/7
        sudo chmod +x /opt/microsoft/powershell/7/pwsh
        sudo ln -s /opt/microsoft/powershell/7/pwsh /usr/local/bin/pwsh
        
        # Verify installation
        pwsh --version
        echo "‚úÖ PowerShell 7 installed successfully"
        
    - name: üì¶ Install Microsoft 365 PowerShell Modules
      id: modules-check
      shell: pwsh
      run: |
        Write-Host "üì¶ Installing Microsoft 365 PowerShell modules..."
        
        # Set PSGallery as trusted
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        
        # Essential Microsoft 365 modules
        $modules = @(
            @{Name="Microsoft.Graph"; MinVersion="2.0.0"},
            @{Name="ExchangeOnlineManagement"; MinVersion="3.4.0"},
            @{Name="MicrosoftTeams"; MinVersion="5.8.0"},
            @{Name="PnP.PowerShell"; MinVersion="2.3.0"},
            @{Name="Az.Accounts"; MinVersion="2.19.0"},
            @{Name="PSScriptAnalyzer"; MinVersion="1.21.0"}
        )
        
        $installResults = @()
        foreach ($module in $modules) {
            try {
                Write-Host "Installing $($module.Name)..."
                Install-Module -Name $module.Name -MinimumVersion $module.MinVersion -Force -AllowClobber -Scope CurrentUser
                
                # Verify installation
                $installed = Get-Module -ListAvailable -Name $module.Name | Select-Object -First 1
                if ($installed) {
                    Write-Host "‚úÖ $($module.Name) v$($installed.Version) installed"
                    $installResults += @{
                        Module = $module.Name
                        Status = "Success"
                        Version = $installed.Version.ToString()
                    }
                } else {
                    Write-Host "‚ùå $($module.Name) installation failed"
                    $installResults += @{
                        Module = $module.Name
                        Status = "Failed"
                        Version = $null
                    }
                }
            } catch {
                Write-Host "‚ùå Error installing $($module.Name): $($_.Exception.Message)"
                $installResults += @{
                    Module = $module.Name
                    Status = "Error"
                    Version = $null
                    Error = $_.Exception.Message
                }
            }
        }
        
        # Export results
        $installResults | ConvertTo-Json | Out-File -FilePath "module-installation-results.json" -Encoding UTF8
        
        $successCount = ($installResults | Where-Object { $_.Status -eq "Success" }).Count
        $totalCount = $installResults.Count
        
        Write-Host "üìä Module Installation Summary: $successCount/$totalCount successful"
        
        if ($successCount -ge ($totalCount * 0.8)) {
            echo "installed=true" >> $env:GITHUB_OUTPUT
            echo "‚úÖ Microsoft 365 modules installation: PASSED"
        } else {
            echo "installed=false" >> $env:GITHUB_OUTPUT
            echo "‚ùå Microsoft 365 modules installation: FAILED"
        }
        
    - name: üß™ PowerShell Scripts Syntax Validation
      id: powershell-check
      shell: pwsh
      run: |
        Write-Host "üß™ PowerShell Scripts Syntax Validation"
        
        $scriptPaths = @(
            "Scripts/Common/*.ps1",
            "Scripts/Common/*.psm1",
            "Scripts/EXO/*.ps1",
            "Scripts/EntraID/*.ps1",
            "Apps/*.ps1",
            "TestScripts/*.ps1"
        )
        
        $syntaxErrors = @()
        $totalScripts = 0
        $validScripts = 0
        
        foreach ($pathPattern in $scriptPaths) {
            $scripts = Get-ChildItem -Path $pathPattern -ErrorAction SilentlyContinue
            foreach ($script in $scripts) {
                $totalScripts++
                Write-Host "Validating: $($script.Name)"
                
                try {
                    # Parse script for syntax errors
                    $tokens = $null
                    $errors = $null
                    [System.Management.Automation.PSParser]::Tokenize((Get-Content $script.FullName -Raw), [ref]$tokens, [ref]$errors)
                    
                    if ($errors.Count -eq 0) {
                        Write-Host "‚úÖ $($script.Name): Valid"
                        $validScripts++
                    } else {
                        Write-Host "‚ùå $($script.Name): Syntax errors found"
                        foreach ($error in $errors) {
                            Write-Host "   - Line $($error.Token.StartLine): $($error.Message)"
                            $syntaxErrors += @{
                                File = $script.Name
                                Line = $error.Token.StartLine
                                Message = $error.Message
                            }
                        }
                    }
                } catch {
                    Write-Host "‚ùå $($script.Name): Parse error - $($_.Exception.Message)"
                    $syntaxErrors += @{
                        File = $script.Name
                        Line = 0
                        Message = $_.Exception.Message
                    }
                }
            }
        }
        
        # Export syntax error results
        $syntaxErrors | ConvertTo-Json | Out-File -FilePath "powershell-syntax-errors.json" -Encoding UTF8
        
        Write-Host "üìä PowerShell Syntax Validation: $validScripts/$totalScripts scripts valid"
        
        # PSScriptAnalyzer check
        if (Get-Module -ListAvailable PSScriptAnalyzer) {
            Write-Host "üîç Running PSScriptAnalyzer..."
            
            $analysisResults = @()
            foreach ($pathPattern in $scriptPaths) {
                $scripts = Get-ChildItem -Path $pathPattern -ErrorAction SilentlyContinue
                foreach ($script in $scripts) {
                    try {
                        $results = Invoke-ScriptAnalyzer -Path $script.FullName -Severity Warning,Error
                        if ($results) {
                            foreach ($result in $results) {
                                $analysisResults += @{
                                    File = $script.Name
                                    Line = $result.Line
                                    Severity = $result.Severity
                                    RuleName = $result.RuleName
                                    Message = $result.Message
                                }
                            }
                        }
                    } catch {
                        Write-Host "‚ö†Ô∏è PSScriptAnalyzer error for $($script.Name): $($_.Exception.Message)"
                    }
                }
            }
            
            $analysisResults | ConvertTo-Json | Out-File -FilePath "scriptanalyzer-results.json" -Encoding UTF8
            Write-Host "üìä PSScriptAnalyzer found $($analysisResults.Count) issues"
        }
        
        # Determine readiness
        $syntaxErrorCount = $syntaxErrors.Count
        if ($syntaxErrorCount -eq 0 -and $validScripts -eq $totalScripts) {
            echo "ready=true" >> $env:GITHUB_OUTPUT
            echo "‚úÖ PowerShell validation: READY"
        } else {
            echo "ready=false" >> $env:GITHUB_OUTPUT
            echo "‚ùå PowerShell validation: NOT READY ($syntaxErrorCount errors)"
        }
        
    - name: üìÑ Upload PowerShell Validation Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: powershell-validation-reports
        path: |
          module-installation-results.json
          powershell-syntax-errors.json
          scriptanalyzer-results.json
        retention-days: 30

  # ============================================================================
  # PowerShell + Python Hybrid Container Build
  # ============================================================================
  hybrid-container-build:
    name: üê≥ PowerShell + Python Hybrid Container
    needs: powershell-validation
    if: needs.powershell-validation.outputs.powershell-ready == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
      
    steps:
    - name: üì• Repository Checkout
      uses: actions/checkout@v4
      
    - name: üîê Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üèóÔ∏è Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üìä Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/powershell-hybrid
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=powershell-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: üê≥ Build PowerShell Hybrid Container
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Docker/powershell-alpine.Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ steps.meta.outputs.created }}
          POWERSHELL_VERSION=${{ env.POWERSHELL_VERSION }}
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          
    - name: üß™ Test PowerShell Container
      run: |
        echo "üß™ Testing PowerShell hybrid container..."
        
        # Run container health check
        docker run --rm \
          --name powershell-test \
          ${{ steps.meta.outputs.tags }} \
          python /app/health-check-hybrid.py
          
        echo "‚úÖ PowerShell hybrid container test passed"

  # ============================================================================
  # Microsoft 365 Integration Test (Optional)
  # ============================================================================
  microsoft365-integration-test:
    name: üîó Microsoft 365 Integration Test
    needs: [powershell-validation, hybrid-container-build]
    if: |
      github.event.inputs.test_microsoft365 == 'true' &&
      needs.powershell-validation.outputs.modules-installed == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: development
    
    steps:
    - name: üì• Repository Checkout
      uses: actions/checkout@v4
      
    - name: ‚ö° Setup PowerShell + Modules
      shell: bash
      run: |
        # Install PowerShell
        wget -q https://github.com/PowerShell/PowerShell/releases/download/v${{ env.POWERSHELL_VERSION }}/powershell-${{ env.POWERSHELL_VERSION }}-linux-x64.tar.gz
        sudo mkdir -p /opt/microsoft/powershell/7
        sudo tar zxf powershell-${{ env.POWERSHELL_VERSION }}-linux-x64.tar.gz -C /opt/microsoft/powershell/7
        sudo chmod +x /opt/microsoft/powershell/7/pwsh
        sudo ln -s /opt/microsoft/powershell/7/pwsh /usr/local/bin/pwsh
        
    - name: üîó Microsoft 365 Connectivity Test
      shell: pwsh
      env:
        TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      run: |
        Write-Host "üîó Testing Microsoft 365 connectivity..."
        
        # Install required modules
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module Microsoft.Graph -Force -Scope CurrentUser
        
        try {
            # Test Microsoft Graph connection
            if ($env:TENANT_ID -and $env:CLIENT_ID -and $env:CLIENT_SECRET) {
                Write-Host "Attempting Microsoft Graph authentication..."
                
                $credential = [PSCredential]::new($env:CLIENT_ID, (ConvertTo-SecureString $env:CLIENT_SECRET -AsPlainText -Force))
                Connect-MgGraph -TenantId $env:TENANT_ID -ClientSecretCredential $credential -NoWelcome
                
                # Test basic Graph API call
                $context = Get-MgContext
                if ($context) {
                    Write-Host "‚úÖ Microsoft Graph authentication successful"
                    Write-Host "   Tenant: $($context.TenantId)"
                    Write-Host "   App: $($context.AppName)"
                    
                    # Test simple API call
                    try {
                        $org = Get-MgOrganization | Select-Object -First 1
                        if ($org) {
                            Write-Host "‚úÖ Microsoft Graph API test successful"
                            Write-Host "   Organization: $($org.DisplayName)"
                        }
                    } catch {
                        Write-Host "‚ö†Ô∏è Microsoft Graph API test failed: $($_.Exception.Message)"
                    }
                    
                    Disconnect-MgGraph
                } else {
                    Write-Host "‚ùå Microsoft Graph authentication failed"
                }
            } else {
                Write-Host "‚ö†Ô∏è Microsoft 365 credentials not provided, skipping connectivity test"
            }
        } catch {
            Write-Host "‚ùå Microsoft 365 integration test failed: $($_.Exception.Message)"
            Write-Host "Stack trace: $($_.Exception.StackTrace)"
        }

  # ============================================================================
  # PowerShell Scripts „Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÉÜ„Çπ„Éà
  # ============================================================================
  powershell-deployment-test:
    name: üöÄ PowerShell Scripts Deployment Test
    needs: [powershell-validation, hybrid-container-build]
    if: needs.powershell-validation.outputs.powershell-ready == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        mode: [hybrid, bridge, standalone]
    
    steps:
    - name: üì• Repository Checkout
      uses: actions/checkout@v4
      
    - name: üß™ Test PowerShell Execution Mode: ${{ matrix.mode }}
      run: |
        echo "üß™ Testing PowerShell execution mode: ${{ matrix.mode }}"
        
        # Run hybrid container in specified mode
        docker run --rm \
          --name powershell-${{ matrix.mode }}-test \
          -v $(pwd):/workspace \
          ${{ needs.hybrid-container-build.outputs.image-tag }} \
          ${{ matrix.mode }} --test || echo "Mode ${{ matrix.mode }} test completed"
          
    - name: üìä PowerShell Bridge Test
      if: matrix.mode == 'bridge'
      run: |
        echo "üìä Testing PowerShell-Python bridge functionality"
        
        # Test bridge communication
        docker run --rm \
          --name powershell-bridge-test \
          -v $(pwd):/workspace \
          ${{ needs.hybrid-container-build.outputs.image-tag }} \
          python /app/powershell-bridge.py || echo "Bridge test completed"

  # ============================================================================
  # Integration Summary & Reports
  # ============================================================================
  integration-summary:
    name: üìã PowerShell Integration Summary
    needs: [powershell-validation, hybrid-container-build, microsoft365-integration-test, powershell-deployment-test]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: üìä Generate Integration Report
      run: |
        cat > powershell-integration-report.md << 'EOF'
        # PowerShell 7 + Microsoft 365 Integration Report
        
        ## üéØ Dev04 (PowerShell/Microsoft 365 Specialist) Integration Status
        
        ### ‚ö° PowerShell 7 Environment
        - **PowerShell Version**: ${{ env.POWERSHELL_VERSION }}
        - **Validation Status**: ${{ needs.powershell-validation.outputs.powershell-ready }}
        - **Modules Installation**: ${{ needs.powershell-validation.outputs.modules-installed }}
        
        ### üê≥ Hybrid Container
        - **Container Build**: ${{ needs.hybrid-container-build.result }}
        - **Image Tag**: ${{ needs.hybrid-container-build.outputs.image-tag }}
        
        ### üîó Microsoft 365 Integration
        - **Integration Test**: ${{ needs.microsoft365-integration-test.result }}
        - **Test Executed**: ${{ github.event.inputs.test_microsoft365 == 'true' && 'Yes' || 'No' }}
        
        ### üöÄ Deployment Testing
        - **Deployment Test**: ${{ needs.powershell-deployment-test.result }}
        - **Test Modes**: hybrid, bridge, standalone
        
        ## üìà PowerShell ‚Üí Python Migration Status
        
        ### ‚úÖ Completed
        - PowerShell 7.4.1 Áí∞Â¢ÉÊßãÁØâ
        - Microsoft 365 „É¢„Ç∏„É•„Éº„É´Áµ±Âêà
        - PowerShell + Python Hybrid Container
        - Multi-mode execution support
        - Syntax validation pipeline
        
        ### üîÑ In Progress  
        - Microsoft Graph API PowerShell ‚Üí Python migration
        - GUI application containerization
        - Enhanced error handling bridge
        
        ### üìã Next Steps
        - Production Microsoft 365 authentication testing
        - Performance optimization for hybrid mode
        - Complete PowerShell modules Python equivalents
        
        ---
        **Generated by**: Dev04 PowerShell Integration Pipeline
        **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF
        
        cat powershell-integration-report.md
        
    - name: üìÑ Upload Integration Report
      uses: actions/upload-artifact@v4
      with:
        name: powershell-integration-report
        path: powershell-integration-report.md
        retention-days: 90
        
    - name: ‚úÖ Integration Status
      run: |
        POWERSHELL_READY="${{ needs.powershell-validation.outputs.powershell-ready }}"
        CONTAINER_SUCCESS="${{ needs.hybrid-container-build.result }}"
        
        if [ "$POWERSHELL_READY" = "true" ] && [ "$CONTAINER_SUCCESS" = "success" ]; then
          echo "üéâ PowerShell 7 + Microsoft 365 Integration: READY FOR PRODUCTION"
          echo "‚úÖ Dev04 (PowerShell/Microsoft 365 Specialist) pipeline completed successfully"
        else
          echo "‚ö†Ô∏è PowerShell 7 + Microsoft 365 Integration: NEEDS ATTENTION"
          echo "üîç Check individual job results for details"
        fi