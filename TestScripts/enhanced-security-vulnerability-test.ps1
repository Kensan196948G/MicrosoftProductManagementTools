#Requires -Version 5.1

<#
.SYNOPSIS
Microsoft 365管理ツール - 拡張セキュリティ脆弱性テスト

.DESCRIPTION
Dev2 - Test/QA Developerによる包括的なセキュリティ脆弱性テスト。
ISO/IEC 27001準拠のセキュリティ要件、OWASP Top 10、防御的セキュリティスキャンを実装。

.NOTES
Version: 2025.7.18.1  
Author: Dev2 - Test/QA Developer
Framework: PowerShell 5.1+
Security Standard: ISO/IEC 27001, OWASP Top 10
Purpose: 防御的セキュリティ分析（攻撃的ツールではありません）

.EXAMPLE
.\enhanced-security-vulnerability-test.ps1
包括的セキュリティスキャンを実行

.EXAMPLE
.\enhanced-security-vulnerability-test.ps1 -ScanLevel "Critical" -GenerateReport
重要度高のセキュリティ問題のみスキャン
#>

[CmdletBinding()]
param(
    [ValidateSet("All", "Critical", "High", "Medium", "Low")]
    [string]$ScanLevel = "All",
    
    [string]$ProjectRoot = "E:\MicrosoftProductManagementTools",
    [string]$OutputPath = "TestReports",
    [switch]$GenerateReport = $true,
    [switch]$DetailedScan = $true
)

# セキュリティスキャン開始
$ScanStartTime = Get-Date
$SessionId = Get-Date -Format "yyyyMMdd_HHmmss"

Write-Host "🔒 Microsoft 365管理ツール - セキュリティ脆弱性スキャン開始" -ForegroundColor Red
Write-Host "スキャンセッション ID: $SessionId" -ForegroundColor Yellow
Write-Host "スキャンレベル: $ScanLevel" -ForegroundColor Yellow
Write-Host "プロジェクトルート: $ProjectRoot" -ForegroundColor Gray
Write-Host ""

# 出力ディレクトリ作成
$OutputDir = Join-Path $PSScriptRoot $OutputPath
if (-not (Test-Path $OutputDir)) {
    New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
}

# セキュリティスキャン結果
$SecurityResults = @{
    CriticalVulnerabilities = @()
    HighVulnerabilities = @()
    MediumVulnerabilities = @()
    LowVulnerabilities = @()
    ComplianceIssues = @()
    AuthenticationIssues = @()
    EncryptionIssues = @()
    InputValidationIssues = @()
    LoggingSecurityIssues = @()
    FilePermissionIssues = @()
    CodeInjectionRisks = @()
    InformationDisclosureRisks = @()
    TotalFilesScanned = 0
    TotalVulnerabilities = 0
    RiskScore = 0
}

# ヘルパー関数: セキュリティログ
function Write-SecurityLog {
    param(
        [string]$Message,
        [ValidateSet("Info", "Warning", "Critical", "High", "Medium", "Low")]
        [string]$Level = "Info"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $color = switch ($Level) {
        "Info" { "White" }
        "Warning" { "Yellow" }
        "Critical" { "Red" }
        "High" { "Magenta" }
        "Medium" { "Yellow" }
        "Low" { "Cyan" }
    }
    
    Write-Host "[$timestamp] [$Level] $Message" -ForegroundColor $color
}

# ヘルパー関数: 脆弱性レポート追加
function Add-VulnerabilityReport {
    param(
        [string]$Severity,
        [string]$Type,
        [string]$Description,
        [string]$FilePath,
        [int]$LineNumber = 0,
        [string]$Code = "",
        [string]$Recommendation = "",
        [string]$CWE = "",
        [string]$OWASP = ""
    )
    
    $vulnerability = [PSCustomObject]@{
        Severity = $Severity
        Type = $Type
        Description = $Description
        FilePath = $FilePath
        LineNumber = $LineNumber
        Code = $Code
        Recommendation = $Recommendation
        CWE = $CWE
        OWASP = $OWASP
        DetectedAt = Get-Date
        SessionId = $SessionId
    }
    
    switch ($Severity) {
        "Critical" { $SecurityResults.CriticalVulnerabilities += $vulnerability }
        "High" { $SecurityResults.HighVulnerabilities += $vulnerability }
        "Medium" { $SecurityResults.MediumVulnerabilities += $vulnerability }
        "Low" { $SecurityResults.LowVulnerabilities += $vulnerability }
    }
    
    $SecurityResults.TotalVulnerabilities++
}

Write-SecurityLog "セキュリティスキャンを開始します" -Level "Info"

# 1. 認証・認可セキュリティスキャン
Write-SecurityLog "認証・認可セキュリティをスキャン中..." -Level "Info"

$scriptFiles = Get-ChildItem -Path $ProjectRoot -Include "*.ps1", "*.psm1" -Recurse
$SecurityResults.TotalFilesScanned = $scriptFiles.Count

foreach ($file in $scriptFiles) {
    $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
    if (-not $content) { continue }
    
    $lines = $content -split "`n"
    
    # A1. ハードコードされた認証情報の検出
    $credentialPatterns = @(
        @{ Pattern = "password\s*=\s*[`"'][^`"']+[`"']"; Severity = "Critical"; Type = "ハードコードされたパスワード"; CWE = "CWE-798"; OWASP = "A07-Identification and Authentication Failures" },
        @{ Pattern = "secret\s*=\s*[`"'][^`"']+[`"']"; Severity = "Critical"; Type = "ハードコードされたシークレット"; CWE = "CWE-798"; OWASP = "A07-Identification and Authentication Failures" },
        @{ Pattern = "token\s*=\s*[`"'][^`"']+[`"']"; Severity = "High"; Type = "ハードコードされたトークン"; CWE = "CWE-798"; OWASP = "A07-Identification and Authentication Failures" },
        @{ Pattern = "key\s*=\s*[`"'][^`"']+[`"']"; Severity = "High"; Type = "ハードコードされたキー"; CWE = "CWE-798"; OWASP = "A07-Identification and Authentication Failures" },
        @{ Pattern = "certificatepassword\s*=\s*[`"'][^`"']+[`"']"; Severity = "Critical"; Type = "ハードコードされた証明書パスワード"; CWE = "CWE-798"; OWASP = "A07-Identification and Authentication Failures" }
    )
    
    foreach ($pattern in $credentialPatterns) {
        $matches = [regex]::Matches($content, $pattern.Pattern, [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
        foreach ($match in $matches) {
            $lineNumber = ($content.Substring(0, $match.Index) -split "`n").Count
            Add-VulnerabilityReport -Severity $pattern.Severity -Type $pattern.Type -Description "ファイル内に認証情報がハードコードされています" -FilePath $file.FullName -LineNumber $lineNumber -Code $match.Value -Recommendation "環境変数または Azure Key Vault を使用してください" -CWE $pattern.CWE -OWASP $pattern.OWASP
        }
    }
    
    # A2. 危険なコマンド実行パターンの検出
    $dangerousPatterns = @(
        @{ Pattern = "Invoke-Expression\s+\$"; Severity = "Critical"; Type = "コマンドインジェクション"; CWE = "CWE-78"; OWASP = "A03-Injection" },
        @{ Pattern = "IEX\s+\$"; Severity = "Critical"; Type = "コマンドインジェクション"; CWE = "CWE-78"; OWASP = "A03-Injection" },
        @{ Pattern = "cmd\s*/c\s+\$"; Severity = "High"; Type = "コマンドインジェクション"; CWE = "CWE-78"; OWASP = "A03-Injection" },
        @{ Pattern = "Start-Process.*\$\w+"; Severity = "High"; Type = "プロセスインジェクション"; CWE = "CWE-78"; OWASP = "A03-Injection" },
        @{ Pattern = "Invoke-Command.*\$\w+"; Severity = "Medium"; Type = "リモートコマンド実行"; CWE = "CWE-78"; OWASP = "A03-Injection" }
    )
    
    foreach ($pattern in $dangerousPatterns) {
        $matches = [regex]::Matches($content, $pattern.Pattern, [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
        foreach ($match in $matches) {
            $lineNumber = ($content.Substring(0, $match.Index) -split "`n").Count
            Add-VulnerabilityReport -Severity $pattern.Severity -Type $pattern.Type -Description "ユーザー入力を使用した危険なコマンド実行が検出されました" -FilePath $file.FullName -LineNumber $lineNumber -Code $match.Value -Recommendation "パラメータ化された実行を使用し、入力値を検証してください" -CWE $pattern.CWE -OWASP $pattern.OWASP
        }
    }
    
    # A3. 入力検証の欠如
    $inputValidationPatterns = @(
        @{ Pattern = "Read-Host.*\$\w+"; Severity = "Medium"; Type = "入力検証不備"; CWE = "CWE-20"; OWASP = "A03-Injection" },
        @{ Pattern = "\$args\[\d+\]"; Severity = "Medium"; Type = "引数検証不備"; CWE = "CWE-20"; OWASP = "A03-Injection" },
        @{ Pattern = "param\s*\(.*\$\w+.*\)"; Severity = "Low"; Type = "パラメータ検証不備"; CWE = "CWE-20"; OWASP = "A03-Injection" }
    )
    
    foreach ($pattern in $inputValidationPatterns) {
        $matches = [regex]::Matches($content, $pattern.Pattern, [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
        foreach ($match in $matches) {
            $lineNumber = ($content.Substring(0, $match.Index) -split "`n").Count
            Add-VulnerabilityReport -Severity $pattern.Severity -Type $pattern.Type -Description "入力値の検証が不十分です" -FilePath $file.FullName -LineNumber $lineNumber -Code $match.Value -Recommendation "ValidateSet、ValidatePattern、ValidateRange属性を使用してください" -CWE $pattern.CWE -OWASP $pattern.OWASP
        }
    }
    
    # A4. 情報漏洩リスク
    $informationDisclosurePatterns = @(
        @{ Pattern = "Write-Host.*password"; Severity = "High"; Type = "機密情報出力"; CWE = "CWE-200"; OWASP = "A01-Broken Access Control" },
        @{ Pattern = "Write-Output.*secret"; Severity = "High"; Type = "機密情報出力"; CWE = "CWE-200"; OWASP = "A01-Broken Access Control" },
        @{ Pattern = "ConvertTo-SecureString.*-AsPlainText.*-Force"; Severity = "Medium"; Type = "平文での機密情報処理"; CWE = "CWE-319"; OWASP = "A02-Cryptographic Failures" },
        @{ Pattern = "Write-Error.*\$_\.Exception\.Message"; Severity = "Low"; Type = "詳細エラー情報露出"; CWE = "CWE-209"; OWASP = "A09-Security Logging and Monitoring Failures" }
    )
    
    foreach ($pattern in $informationDisclosurePatterns) {
        $matches = [regex]::Matches($content, $pattern.Pattern, [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
        foreach ($match in $matches) {
            $lineNumber = ($content.Substring(0, $match.Index) -split "`n").Count
            Add-VulnerabilityReport -Severity $pattern.Severity -Type $pattern.Type -Description "機密情報の漏洩リスクが検出されました" -FilePath $file.FullName -LineNumber $lineNumber -Code $match.Value -Recommendation "機密情報をログ出力しないでください" -CWE $pattern.CWE -OWASP $pattern.OWASP
        }
    }
    
    # A5. 暗号化の問題
    if ($content -match "MD5|SHA1" -and $content -notmatch "# 古いハッシュアルゴリズムを意図的に使用") {
        Add-VulnerabilityReport -Severity "Medium" -Type "弱い暗号化アルゴリズム" -Description "MD5またはSHA1など、暗号学的に弱いハッシュアルゴリズムが使用されています" -FilePath $file.FullName -Recommendation "SHA-256以上の強力なハッシュアルゴリズムを使用してください" -CWE "CWE-327" -OWASP "A02-Cryptographic Failures"
    }
    
    # A6. アクセス制御の問題
    if ($content -match "-Credential\s+\$null" -or $content -match "-Username\s+`"`"") {
        Add-VulnerabilityReport -Severity "High" -Type "空の認証情報" -Description "空またはnullの認証情報が使用されています" -FilePath $file.FullName -Recommendation "適切な認証情報を設定してください" -CWE "CWE-306" -OWASP "A07-Identification and Authentication Failures"
    }
    
    # A7. ログ記録の不備
    if ($content -match "catch\s*\{" -and $content -notmatch "Write-Log" -and $content -notmatch "Write-Error" -and $content -notmatch "Write-Warning") {
        Add-VulnerabilityReport -Severity "Medium" -Type "例外処理でのログ記録不備" -Description "例外処理でログ記録が行われていません" -FilePath $file.FullName -Recommendation "セキュリティイベントを適切にログ記録してください" -CWE "CWE-778" -OWASP "A09-Security Logging and Monitoring Failures"
    }
}

# 2. 設定ファイルセキュリティスキャン
Write-SecurityLog "設定ファイルセキュリティをスキャン中..." -Level "Info"

$configFiles = Get-ChildItem -Path $ProjectRoot -Include "*.json", "*.xml", "*.config" -Recurse

foreach ($configFile in $configFiles) {
    $configContent = Get-Content $configFile.FullName -Raw -ErrorAction SilentlyContinue
    if (-not $configContent) { continue }
    
    # 設定ファイル内の機密情報
    if ($configContent -match '"password"\s*:\s*"[^"]+"' -or $configContent -match '"secret"\s*:\s*"[^"]+"' -or $configContent -match '"token"\s*:\s*"[^"]+"') {
        Add-VulnerabilityReport -Severity "Critical" -Type "設定ファイル内機密情報" -Description "設定ファイルに機密情報が平文で保存されています" -FilePath $configFile.FullName -Recommendation "Azure Key Vault または環境変数を使用してください" -CWE "CWE-313" -OWASP "A02-Cryptographic Failures"
    }
    
    # デフォルト認証情報の使用
    $defaultCredentials = @("admin", "password", "123456", "default", "test")
    foreach ($defaultCred in $defaultCredentials) {
        if ($configContent -match "`"$defaultCred`"") {
            Add-VulnerabilityReport -Severity "High" -Type "デフォルト認証情報" -Description "デフォルトの認証情報が使用されています" -FilePath $configFile.FullName -Code $defaultCred -Recommendation "強力でユニークな認証情報に変更してください" -CWE "CWE-798" -OWASP "A07-Identification and Authentication Failures"
        }
    }
}

# 3. ファイル権限セキュリティスキャン
Write-SecurityLog "ファイル権限をスキャン中..." -Level "Info"

$sensitiveFiles = @(
    @{ Path = Join-Path $ProjectRoot "Config\appsettings.json"; Type = "設定ファイル" },
    @{ Path = Join-Path $ProjectRoot "Certificates"; Type = "証明書ディレクトリ" },
    @{ Path = Join-Path $ProjectRoot "Logs"; Type = "ログディレクトリ" }
)

foreach ($sensitiveItem in $sensitiveFiles) {
    if (Test-Path $sensitiveItem.Path) {
        try {
            $acl = Get-Acl $sensitiveItem.Path -ErrorAction SilentlyContinue
            
            # Everyone グループのアクセス権確認
            $everyoneAccess = $acl.Access | Where-Object { $_.IdentityReference -eq "Everyone" }
            if ($everyoneAccess) {
                Add-VulnerabilityReport -Severity "High" -Type "過度なファイル権限" -Description "$($sensitiveItem.Type)にEveryoneグループのアクセス権が設定されています" -FilePath $sensitiveItem.Path -Recommendation "最小権限の原則に従ってアクセス権を制限してください" -CWE "CWE-732" -OWASP "A01-Broken Access Control"
            }
            
            # Users グループの書き込み権限確認
            $usersWriteAccess = $acl.Access | Where-Object { 
                $_.IdentityReference -match "Users" -and 
                ($_.FileSystemRights -match "Write|FullControl|Modify") 
            }
            if ($usersWriteAccess) {
                Add-VulnerabilityReport -Severity "Medium" -Type "危険なファイル権限" -Description "$($sensitiveItem.Type)にUsersグループの書き込み権限が設定されています" -FilePath $sensitiveItem.Path -Recommendation "読み取り専用権限に制限してください" -CWE "CWE-732" -OWASP "A01-Broken Access Control"
            }
        } catch {
            Write-SecurityLog "ファイル権限の確認に失敗: $($sensitiveItem.Path)" -Level "Warning"
        }
    }
}

# 4. 依存関係セキュリティスキャン
Write-SecurityLog "依存関係セキュリティをスキャン中..." -Level "Info"

$moduleFiles = Get-ChildItem -Path $ProjectRoot -Include "*.psm1", "*.psd1" -Recurse

foreach ($moduleFile in $moduleFiles) {
    $moduleContent = Get-Content $moduleFile.FullName -Raw -ErrorAction SilentlyContinue
    if (-not $moduleContent) { continue }
    
    # 古いモジュールバージョンの使用
    if ($moduleContent -match "RequiredVersion\s*=\s*[`"']([0-9]+\.[0-9]+\.[0-9]+)[`"']") {
        $version = $matches[1]
        # 簡易的な古いバージョンチェック（実際のプロジェクトでは更新された脆弱性データベースを使用）
        if ($version -match "^[0-2]\." -or $version -match "^3\.[0-4]\.") {
            Add-VulnerabilityReport -Severity "Medium" -Type "古い依存関係" -Description "潜在的に脆弱性のある古いモジュールバージョンが使用されています" -FilePath $moduleFile.FullName -Code $version -Recommendation "最新の安全なバージョンに更新してください" -CWE "CWE-1104" -OWASP "A06-Vulnerable and Outdated Components"
        }
    }
    
    # 信頼できないソースからのモジュール読み込み
    if ($moduleContent -match "Import-Module.*http://" -or $moduleContent -match "Import-Module.*ftp://") {
        Add-VulnerabilityReport -Severity "High" -Type "信頼できないモジュールソース" -Description "HTTPまたはFTPなど、安全でないプロトコルでモジュールを読み込んでいます" -FilePath $moduleFile.FullName -Recommendation "HTTPS経由または署名済みモジュールを使用してください" -CWE "CWE-494" -OWASP "A06-Vulnerable and Outdated Components"
    }
}

# 5. ISO/IEC 27001コンプライアンススキャン
Write-SecurityLog "ISO/IEC 27001コンプライアンスをスキャン中..." -Level "Info"

$configPath = Join-Path $ProjectRoot "Config\appsettings.json"
if (Test-Path $configPath) {
    $config = Get-Content $configPath -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
    
    if ($config) {
        # 監査証跡の有効化確認
        if (-not $config.Security.EnableAuditTrail) {
            Add-VulnerabilityReport -Severity "High" -Type "ISO 27001違反" -Description "監査証跡が有効化されていません (A.12.4.1)" -FilePath $configPath -Recommendation "監査証跡を有効化してください" -CWE "CWE-778" -OWASP "A09-Security Logging and Monitoring Failures"
            $SecurityResults.ComplianceIssues += "A.12.4.1: 監査証跡未有効化"
        }
        
        # MFA要求の確認
        if (-not $config.Security.RequireMFAForAdmins) {
            Add-VulnerabilityReport -Severity "High" -Type "ISO 27001違反" -Description "管理者に対するMFAが要求されていません (A.9.4.2)" -FilePath $configPath -Recommendation "管理者アクセスにMFAを要求してください" -CWE "CWE-308" -OWASP "A07-Identification and Authentication Failures"
            $SecurityResults.ComplianceIssues += "A.9.4.2: 管理者MFA未要求"
        }
        
        # データ暗号化の確認
        if (-not $config.Security.EncryptSensitiveData) {
            Add-VulnerabilityReport -Severity "High" -Type "ISO 27001違反" -Description "機密データの暗号化が有効化されていません (A.10.1.1)" -FilePath $configPath -Recommendation "機密データの暗号化を有効化してください" -CWE "CWE-311" -OWASP "A02-Cryptographic Failures"
            $SecurityResults.ComplianceIssues += "A.10.1.1: データ暗号化未有効化"
        }
    }
}

# リスクスコア計算
$riskWeights = @{
    "Critical" = 10
    "High" = 7
    "Medium" = 4
    "Low" = 1
}

$SecurityResults.RiskScore = (
    ($SecurityResults.CriticalVulnerabilities.Count * $riskWeights.Critical) +
    ($SecurityResults.HighVulnerabilities.Count * $riskWeights.High) +
    ($SecurityResults.MediumVulnerabilities.Count * $riskWeights.Medium) +
    ($SecurityResults.LowVulnerabilities.Count * $riskWeights.Low)
)

# スキャン結果表示
$ScanEndTime = Get-Date
$TotalDuration = ($ScanEndTime - $ScanStartTime).TotalSeconds

Write-Host ""
Write-Host "=== セキュリティスキャン結果 ===" -ForegroundColor Red
Write-Host "スキャン時間: $([math]::Round($TotalDuration, 2)) 秒" -ForegroundColor White
Write-Host "スキャンファイル数: $($SecurityResults.TotalFilesScanned)" -ForegroundColor White
Write-Host ""

Write-Host "🚨 脆弱性統計:" -ForegroundColor Red
Write-Host "  重要: $($SecurityResults.CriticalVulnerabilities.Count)" -ForegroundColor Red
Write-Host "  高: $($SecurityResults.HighVulnerabilities.Count)" -ForegroundColor Magenta  
Write-Host "  中: $($SecurityResults.MediumVulnerabilities.Count)" -ForegroundColor Yellow
Write-Host "  低: $($SecurityResults.LowVulnerabilities.Count)" -ForegroundColor Cyan
Write-Host "  合計: $($SecurityResults.TotalVulnerabilities)" -ForegroundColor White
Write-Host "  リスクスコア: $($SecurityResults.RiskScore)" -ForegroundColor $(if ($SecurityResults.RiskScore -gt 50) { "Red" } elseif ($SecurityResults.RiskScore -gt 20) { "Yellow" } else { "Green" })
Write-Host ""

if ($SecurityResults.ComplianceIssues.Count -gt 0) {
    Write-Host "📜 ISO/IEC 27001コンプライアンス問題:" -ForegroundColor Yellow
    foreach ($issue in $SecurityResults.ComplianceIssues) {
        Write-Host "  • $issue" -ForegroundColor White
    }
    Write-Host ""
}

# 重要な脆弱性の表示
if ($SecurityResults.CriticalVulnerabilities.Count -gt 0) {
    Write-Host "🔴 重要な脆弱性 (要緊急対応):" -ForegroundColor Red
    foreach ($vuln in $SecurityResults.CriticalVulnerabilities | Select-Object -First 5) {
        Write-Host "  • $($vuln.Type): $($vuln.Description)" -ForegroundColor Red
        Write-Host "    ファイル: $($vuln.FilePath)" -ForegroundColor Gray
        if ($vuln.LineNumber -gt 0) {
            Write-Host "    行: $($vuln.LineNumber)" -ForegroundColor Gray
        }
        Write-Host "    推奨対応: $($vuln.Recommendation)" -ForegroundColor Yellow
        Write-Host ""
    }
}

# レポート生成
if ($GenerateReport) {
    Write-SecurityLog "セキュリティレポートを生成しています" -Level "Info"
    
    # CSV レポート
    $csvPath = Join-Path $OutputDir "security-vulnerability-report_$SessionId.csv"
    $allVulnerabilities = $SecurityResults.CriticalVulnerabilities + $SecurityResults.HighVulnerabilities + $SecurityResults.MediumVulnerabilities + $SecurityResults.LowVulnerabilities
    $allVulnerabilities | Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8
    
    # JSON レポート（詳細）
    $jsonPath = Join-Path $OutputDir "security-vulnerability-report_$SessionId.json"
    $SecurityResults | ConvertTo-Json -Depth 10 | Out-File -FilePath $jsonPath -Encoding UTF8
    
    # HTML レポート
    $htmlPath = Join-Path $OutputDir "security-vulnerability-report_$SessionId.html"
    $htmlContent = @"
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>セキュリティ脆弱性レポート - $SessionId</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f8f9fa; }
        .container { max-width: 1200px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1, h2, h3 { color: #dc3545; }
        .alert { padding: 15px; margin: 10px 0; border-radius: 5px; }
        .alert-critical { background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
        .alert-high { background-color: #f1c0f7; border: 1px solid #e1bee7; color: #4a1a4a; }
        .alert-medium { background-color: #fff3cd; border: 1px solid #ffeaa7; color: #856404; }
        .alert-low { background-color: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }
        .metric { display: inline-block; margin: 10px; padding: 15px; border-radius: 5px; text-align: center; min-width: 120px; color: white; }
        .metric-critical { background-color: #dc3545; }
        .metric-high { background-color: #e91e63; }
        .metric-medium { background-color: #ff9800; }
        .metric-low { background-color: #17a2b8; }
        .metric-info { background-color: #6c757d; }
        table { border-collapse: collapse; width: 100%; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        th { background-color: #dc3545; color: white; }
        tr:nth-child(even) { background-color: #f2f2f2; }
        .vulnerability-critical { background-color: #ffebee; }
        .vulnerability-high { background-color: #fce4ec; }
        .vulnerability-medium { background-color: #fff8e1; }
        .vulnerability-low { background-color: #e0f2f1; }
        .recommendation { background-color: #e8f5e8; border: 1px solid #c3e6cb; padding: 10px; margin: 5px 0; border-radius: 5px; }
        .risk-score { font-size: 24px; font-weight: bold; text-align: center; padding: 20px; border-radius: 10px; margin: 20px 0; }
        .risk-high { background-color: #ffcdd2; color: #c62828; }
        .risk-medium { background-color: #fff3e0; color: #ef6c00; }
        .risk-low { background-color: #e8f5e8; color: #2e7d32; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🔒 セキュリティ脆弱性レポート</h1>
        <p><strong>スキャンセッション:</strong> $SessionId</p>
        <p><strong>実行時間:</strong> $([math]::Round($TotalDuration, 2)) 秒</p>
        <p><strong>スキャン日時:</strong> $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
        <p><strong>スキャンファイル数:</strong> $($SecurityResults.TotalFilesScanned)</p>
        
        <h2>📊 脆弱性統計</h2>
        <div>
            <div class="metric metric-critical">
                <div style="font-size: 24px;">$($SecurityResults.CriticalVulnerabilities.Count)</div>
                <div>重要</div>
            </div>
            <div class="metric metric-high">
                <div style="font-size: 24px;">$($SecurityResults.HighVulnerabilities.Count)</div>
                <div>高</div>
            </div>
            <div class="metric metric-medium">
                <div style="font-size: 24px;">$($SecurityResults.MediumVulnerabilities.Count)</div>
                <div>中</div>
            </div>
            <div class="metric metric-low">
                <div style="font-size: 24px;">$($SecurityResults.LowVulnerabilities.Count)</div>
                <div>低</div>
            </div>
            <div class="metric metric-info">
                <div style="font-size: 24px;">$($SecurityResults.TotalVulnerabilities)</div>
                <div>合計</div>
            </div>
        </div>
        
        <div class="risk-score $(if ($SecurityResults.RiskScore -gt 50) { 'risk-high' } elseif ($SecurityResults.RiskScore -gt 20) { 'risk-medium' } else { 'risk-low' })">
            リスクスコア: $($SecurityResults.RiskScore)
        </div>
"@
    
    # ISO/IEC 27001コンプライアンス問題
    if ($SecurityResults.ComplianceIssues.Count -gt 0) {
        $htmlContent += "<h2>📜 ISO/IEC 27001 コンプライアンス問題</h2>`n"
        foreach ($issue in $SecurityResults.ComplianceIssues) {
            $htmlContent += "<div class='alert alert-high'>⚖️ $issue</div>`n"
        }
    }
    
    # 重要な脆弱性
    if ($SecurityResults.CriticalVulnerabilities.Count -gt 0) {
        $htmlContent += "<h2>🚨 重要な脆弱性 (要緊急対応)</h2>`n"
        foreach ($vuln in $SecurityResults.CriticalVulnerabilities) {
            $htmlContent += @"
            <div class="alert alert-critical">
                <h4>$($vuln.Type)</h4>
                <p><strong>説明:</strong> $($vuln.Description)</p>
                <p><strong>ファイル:</strong> $($vuln.FilePath)$(if ($vuln.LineNumber -gt 0) { " (行: $($vuln.LineNumber))" })</p>
                $(if ($vuln.Code) { "<p><strong>コード:</strong> <code>$($vuln.Code)</code></p>" })
                <div class="recommendation">💡 <strong>推奨対応:</strong> $($vuln.Recommendation)</div>
                $(if ($vuln.CWE) { "<p><strong>CWE:</strong> $($vuln.CWE)</p>" })
                $(if ($vuln.OWASP) { "<p><strong>OWASP:</strong> $($vuln.OWASP)</p>" })
            </div>
"@
        }
    }
    
    # 脆弱性詳細テーブル
    $htmlContent += @"
        <h2>📋 脆弱性詳細</h2>
        <table>
            <tr>
                <th>重要度</th>
                <th>タイプ</th>
                <th>説明</th>
                <th>ファイル</th>
                <th>行</th>
                <th>推奨対応</th>
            </tr>
"@
    
    foreach ($vuln in $allVulnerabilities) {
        $severityClass = "vulnerability-$($vuln.Severity.ToLower())"
        $htmlContent += @"
            <tr class="$severityClass">
                <td>$($vuln.Severity)</td>
                <td>$($vuln.Type)</td>
                <td>$($vuln.Description)</td>
                <td>$($vuln.FilePath)</td>
                <td>$(if ($vuln.LineNumber -gt 0) { $vuln.LineNumber } else { "-" })</td>
                <td>$($vuln.Recommendation)</td>
            </tr>
"@
    }
    
    $htmlContent += @"
        </table>
        
        <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #6c757d;">
            <p>Generated by Dev2 - Test/QA Developer | Microsoft 365管理ツール セキュリティ脆弱性テスト</p>
            <p>Report ID: $SessionId | Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
            <p>Security Standards: ISO/IEC 27001, OWASP Top 10 | 防御的セキュリティ分析</p>
        </footer>
    </div>
</body>
</html>
"@
    
    $htmlContent | Out-File -FilePath $htmlPath -Encoding UTF8
    
    Write-SecurityLog "セキュリティレポートを生成しました:" -Level "Info"
    Write-SecurityLog "  CSV: $csvPath" -Level "Info"
    Write-SecurityLog "  JSON: $jsonPath" -Level "Info"
    Write-SecurityLog "  HTML: $htmlPath" -Level "Info"
}

# 終了ステータス
Write-Host ""
if ($SecurityResults.CriticalVulnerabilities.Count -gt 0) {
    Write-Host "🔴 重要な脆弱性が発見されました ($($SecurityResults.CriticalVulnerabilities.Count) 件)" -ForegroundColor Red
    Write-Host "緊急対応が必要です" -ForegroundColor Red
    $exitCode = 2
} elseif ($SecurityResults.HighVulnerabilities.Count -gt 0) {
    Write-Host "🟠 高重要度の脆弱性が発見されました ($($SecurityResults.HighVulnerabilities.Count) 件)" -ForegroundColor Yellow
    Write-Host "優先対応が推奨されます" -ForegroundColor Yellow
    $exitCode = 1
} else {
    Write-Host "🟢 重要・高重要度の脆弱性は発見されませんでした" -ForegroundColor Green
    $exitCode = 0
}

Write-Host "セキュリティスキャン完了: $([math]::Round($TotalDuration, 2)) 秒" -ForegroundColor Gray
Write-Host "リスクスコア: $($SecurityResults.RiskScore)" -ForegroundColor $(if ($SecurityResults.RiskScore -gt 50) { "Red" } elseif ($SecurityResults.RiskScore -gt 20) { "Yellow" } else { "Green" })

exit $exitCode