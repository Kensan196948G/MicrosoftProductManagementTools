# Multi-stage Production Dockerfile for Microsoft 365 Management Tools
# Optimized for security, performance, and minimal attack surface

# Stage 1: Build Environment
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    libpq-dev \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for build
RUN groupadd -r builduser && useradd -r -g builduser builduser

# Set working directory
WORKDIR /build

# Copy requirements first for better layer caching
COPY requirements.txt requirements-dev.txt ./

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Copy source code
COPY . .

# Remove development files and tests
RUN rm -rf tests/ \
    TestScripts/ \
    *.md \
    requirements-dev.txt \
    .git/ \
    .github/ \
    .gitignore \
    .pytest_cache/ \
    __pycache__/ \
    *.pyc \
    *.pyo

# Change ownership to build user
RUN chown -R builduser:builduser /build /opt/venv
USER builduser

# Stage 2: Production Runtime
FROM python:3.11-slim as production

# Set labels for metadata
LABEL maintainer="Microsoft 365 Tools Team" \
      version="${VERSION}" \
      description="Enterprise Microsoft 365 Management Tools API" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}"

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    curl \
    postgresql-client \
    redis-tools \
    ca-certificates \
    tzdata \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for application
RUN groupadd -r m365user && useradd -r -g m365user -u 1001 m365user

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    PATH="/opt/venv/bin:$PATH" \
    PORT=8000 \
    WORKERS=4 \
    ENVIRONMENT=production

# Create app directory structure
RUN mkdir -p /app /app/logs /app/data /app/backups /app/Config && \
    chown -R m365user:m365user /app

# Set working directory
WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder --chown=m365user:m365user /opt/venv /opt/venv

# Copy application code from builder
COPY --from=builder --chown=m365user:m365user /build /app

# Create necessary directories with proper permissions
RUN mkdir -p \
    /app/logs \
    /app/data \
    /app/backups \
    /app/Reports \
    /app/TestOutput \
    && chown -R m365user:m365user /app

# Switch to non-root user
USER m365user

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose port
EXPOSE ${PORT}

# Production startup script
COPY --chown=m365user:m365user scripts/docker-entrypoint.sh /app/docker-entrypoint.sh
RUN chmod +x /app/docker-entrypoint.sh

# Default command
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["uvicorn", "src.main_fastapi:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]