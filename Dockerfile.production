# Microsoft 365 Management Tools - Enhanced Production Dockerfile
# Multi-stage build optimized for enterprise security and performance
# OWASP-compliant container security hardening

# Stage 1: Build Environment with Security Hardening
FROM python:3.11-alpine as builder

# Build arguments with validation
ARG BUILD_DATE
ARG VERSION=2.0.0
ARG VCS_REF
ARG PYTHON_VERSION=3.11

# Enhanced security: Install build dependencies 
RUN apk add --no-cache --virtual .build-deps \
    gcc \
    g++ \
    musl-dev \
    libffi-dev \
    openssl-dev \
    postgresql-dev \
    cargo \
    rust \
    && apk add --no-cache \
    git \
    curl \
    bash \
    shadow

# Create non-root user for build (Alpine-compatible)
RUN addgroup -g 1002 -S builduser && \
    adduser -u 1002 -S builduser -G builduser -s /bin/bash

# Set working directory
WORKDIR /build

# Copy requirements with security validation
COPY requirements.txt requirements-prod.txt* ./

# Enhanced Python package installation with security checks
RUN python -m venv /opt/venv && \
    source /opt/venv/bin/activate && \
    pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir safety bandit && \
    # Security scan of dependencies
    safety check || echo "WARNING: Security issues found in dependencies" && \
    pip install --no-cache-dir -r requirements.txt && \
    if [ -f requirements-prod.txt ]; then pip install --no-cache-dir -r requirements-prod.txt; fi

ENV PATH="/opt/venv/bin:$PATH"

# Copy source code with selective inclusion
COPY src/ ./src/
COPY Scripts/Common/ ./Scripts/Common/
COPY Config/ ./Config/
COPY *.py ./

# Security hardening: Remove sensitive development files
RUN rm -rf \
    TestScripts/ \
    Tests/ \
    .git/ \
    .github/ \
    *.md \
    .pytest_cache/ \
    __pycache__/ \
    .coverage \
    htmlcov/ \
    *.log \
    && find . -name "*.pyc" -delete \
    && find . -name "*.pyo" -delete \
    && find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Security scan of application code
RUN bandit -r . -f json -o /tmp/bandit-report.json --severity-level medium || echo "Security scan completed"

# Change ownership to build user
RUN chown -R builduser:builduser /build /opt/venv
USER builduser

# Stage 2: Production Runtime with Enhanced Security
FROM python:3.11-alpine as production

# Enhanced metadata labels (OCI compliant)
LABEL maintainer="Microsoft 365 Tools Team" \
      version="${VERSION}" \
      description="Enterprise Microsoft 365 Management Tools - Production API" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.title="Microsoft 365 Management Tools" \
      org.opencontainers.image.description="Enterprise-grade Microsoft 365 management platform" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.vendor="Microsoft 365 Tools Team" \
      org.opencontainers.image.licenses="MIT" \
      security.scan="enabled" \
      security.hardened="true"

# Install minimal runtime dependencies with security focus
RUN apk add --no-cache \
    postgresql-client \
    redis \
    curl \
    jq \
    bash \
    ca-certificates \
    tzdata \
    dumb-init \
    shadow \
    && rm -rf /var/cache/apk/*

# Create non-root user for application (Alpine-compatible)
RUN addgroup -g 1001 -S m365user && \
    adduser -u 1001 -S m365user -G m365user -s /bin/bash

# Enhanced production environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONIOENCODING=UTF-8 \
    PYTHONPATH=/app:/app/src \
    PATH="/opt/venv/bin:$PATH" \
    PORT=8000 \
    WORKERS=4 \
    ENVIRONMENT=production \
    LOG_LEVEL=info \
    MAX_WORKERS=4 \
    REQUEST_TIMEOUT=30 \
    KEEP_ALIVE=2 \
    WORKER_CLASS=uvicorn.workers.UvicornWorker \
    WORKER_CONNECTIONS=1000 \
    MAX_REQUESTS=1000 \
    MAX_REQUESTS_JITTER=50

# Security hardening: Create app directory structure with strict permissions
RUN mkdir -p \
    /app \
    /app/src \
    /app/logs \
    /app/data \
    /app/backups \
    /app/Config \
    /app/Reports \
    /app/temp \
    /app/scripts \
    && chown -R m365user:m365user /app \
    && chmod -R 750 /app

# Set working directory
WORKDIR /app

# Copy virtual environment from builder with secure ownership
COPY --from=builder --chown=m365user:m365user /opt/venv /opt/venv

# Copy application code from builder with selective files
COPY --from=builder --chown=m365user:m365user /build/src ./src/
COPY --from=builder --chown=m365user:m365user /build/Scripts/Common ./Scripts/Common/
COPY --from=builder --chown=m365user:m365user /build/Config ./Config/
COPY --from=builder --chown=m365user:m365user /build/*.py ./

# Create production-optimized entrypoint script
RUN cat > /app/docker-entrypoint-production.sh << 'EOF'
#!/bin/bash
set -euo pipefail

# Production startup banner
echo "🚀 Microsoft 365 Management Tools - Production"
echo "   Version: ${VERSION:-2.0.0}"
echo "   Environment: ${ENVIRONMENT:-production}"
echo "   Workers: ${WORKERS:-4}"
echo "   Port: ${PORT:-8000}"

# Security validation
if [ "$(id -u)" = "0" ]; then
    echo "❌ ERROR: Running as root is not allowed in production"
    exit 1
fi

# Database connectivity check
if [ -n "${DATABASE_URL:-}" ]; then
    echo "⏳ Waiting for database..."
    until pg_isready -d "${DATABASE_URL}" >/dev/null 2>&1; do
        echo "   Database not ready, waiting..."
        sleep 2
    done
    echo "✅ Database connection verified"
fi

# Redis connectivity check  
if [ -n "${REDIS_URL:-}" ]; then
    echo "⏳ Checking Redis connection..."
    redis-cli -u "${REDIS_URL}" ping >/dev/null 2>&1 && \
        echo "✅ Redis connection verified" || \
        echo "⚠️ Redis connection failed"
fi

# Initialize application directories
mkdir -p /app/logs /app/reports /app/temp
chown m365user:m365user /app/logs /app/reports /app/temp

# Start based on command
case "${1:-api}" in
    "api"|"fastapi")
        echo "🌐 Starting FastAPI server..."
        exec uvicorn src.main_fastapi:app \
            --host 0.0.0.0 \
            --port "${PORT:-8000}" \
            --workers "${WORKERS:-4}" \
            --worker-class "${WORKER_CLASS:-uvicorn.workers.UvicornWorker}" \
            --max-requests "${MAX_REQUESTS:-1000}" \
            --max-requests-jitter "${MAX_REQUESTS_JITTER:-50}" \
            --timeout-keep-alive "${KEEP_ALIVE:-2}" \
            --access-log \
            --log-level "${LOG_LEVEL:-info}"
        ;;
    "gui")
        echo "🖥️ Starting GUI application..."
        exec python src/main.py --mode gui
        ;;
    "cli")
        echo "⌨️ Starting CLI application..."
        exec python src/main.py --mode cli "${@:2}"
        ;;
    "worker")
        echo "⚙️ Starting background worker..."
        exec python -m src.worker "${@:2}"
        ;;
    *)
        echo "📋 Custom command execution..."
        exec "$@"
        ;;
esac
EOF

RUN chmod +x /app/docker-entrypoint-production.sh

# Enhanced health check script with comprehensive monitoring
RUN cat > /app/health-check-enhanced.py << 'EOF'
#!/usr/bin/env python3
import sys
import json
import os
from datetime import datetime

def main():
    try:
        import requests
        response = requests.get(f"http://localhost:{os.getenv('PORT', '8000')}/health", timeout=5)
        health_data = {
            "timestamp": datetime.now().isoformat(),
            "status": "healthy" if response.status_code == 200 else "unhealthy",
            "status_code": response.status_code,
            "response_time_ms": int(response.elapsed.total_seconds() * 1000)
        }
        if response.status_code == 200:
            try:
                api_data = response.json()
                health_data.update(api_data)
            except:
                pass
        print(json.dumps(health_data))
        sys.exit(0 if response.status_code == 200 else 1)
    except Exception as e:
        print(json.dumps({
            "timestamp": datetime.now().isoformat(),
            "status": "unhealthy",
            "error": str(e)
        }))
        sys.exit(1)

if __name__ == "__main__":
    main()
EOF

RUN chmod +x /app/health-check-enhanced.py

# Security: Switch to non-root user
USER m365user

# Production-grade health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python /app/health-check-enhanced.py || exit 1

# Expose port
EXPOSE 8000

# Use dumb-init for proper signal handling in containers
ENTRYPOINT ["dumb-init", "--", "/app/docker-entrypoint-production.sh"]

# Default command optimized for production
CMD ["api"]