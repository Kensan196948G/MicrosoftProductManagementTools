name: Microsoft 365管理ツール - pytest CI/CD Pipeline
# Dev1 - Test/QA Developer による基盤構築

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
    paths:
      - 'src/**'
      - 'Tests/**'
      - 'tests/**'
      - 'pytest.ini'
      - 'conftest.py'
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'Makefile'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Tests/**'
      - 'tests/**'
      - 'pytest.ini'
      - 'conftest.py'
      - 'requirements.txt'
      - 'pyproject.toml'
  schedule:
    # 毎日午前2時にテスト実行（JST）
    - cron: '0 17 * * *'
  workflow_dispatch:
    inputs:
      test_category:
        description: 'Test category to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - compatibility
          - gui
          - security
          - performance
      skip_powershell:
        description: 'Skip PowerShell compatibility tests'
        required: false
        default: true
        type: boolean
      skip_auth:
        description: 'Skip authentication required tests'
        required: false
        default: true
        type: boolean
      verbose:
        description: 'Verbose output'
        required: false
        default: true
        type: boolean

env:
  PYTHONUNBUFFERED: 1
  PYTEST_TIMEOUT: 1800
  COVERAGE_THRESHOLD: 80
  PYTHON_VERSION_MATRIX: "['3.9', '3.10', '3.11', '3.12']"

jobs:
  unit-tests:
    name: ユニットテスト
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
    
    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
    
    - name: Python ${{ matrix.python-version }} セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: システム依存関係インストール
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          x11-utils \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0
    
    - name: Python依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: ユニットテスト実行
      run: |
        xvfb-run -a python -m pytest tests/unit \
          -v \
          --tb=short \
          --cov=src \
          --cov-report=xml:coverage-unit-py${{ matrix.python-version }}.xml \
          --cov-report=html:htmlcov-unit-py${{ matrix.python-version }} \
          --cov-report=json:coverage-unit-py${{ matrix.python-version }}.json \
          --junitxml=unit-test-results-py${{ matrix.python-version }}.xml \
          --html=unit-test-report-py${{ matrix.python-version }}.html \
          --self-contained-html \
          --durations=10 \
          -m "unit and not requires_auth and not requires_powershell"
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99
    
    - name: カバレッジ結果アップロード
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage-unit-py${{ matrix.python-version }}.xml
        flags: unittests
        name: unit-tests-python-${{ matrix.python-version }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: テスト結果アーティファクト保存
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-python-${{ matrix.python-version }}
        path: |
          unit-test-results-py${{ matrix.python-version }}.xml
          unit-test-report-py${{ matrix.python-version }}.html
          htmlcov-unit-py${{ matrix.python-version }}/
          coverage-unit-py${{ matrix.python-version }}.xml
          coverage-unit-py${{ matrix.python-version }}.json
        retention-days: 30

  integration-tests:
    name: 統合テスト
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
    
    - name: Python 3.11 セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: システム依存関係インストール
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils
    
    - name: Python依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: 統合テスト実行
      run: |
        xvfb-run -a python -m pytest tests/integration \
          -v \
          --tb=short \
          --junitxml=integration-test-results.xml \
          --html=integration-test-report.html \
          --self-contained-html \
          -m "integration and not requires_auth"
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99
    
    - name: 統合テスト結果アーティファクト保存
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          integration-test-results.xml
          integration-test-report.html
        retention-days: 30

  compatibility-tests:
    name: 互換性テスト（PowerShellなし）
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
    
    - name: Python 3.11 セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Python依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: 互換性テスト実行（PowerShellスキップ）
      run: |
        python -m pytest tests/compatibility \
          -v \
          --tb=short \
          --junitxml=compatibility-test-results.xml \
          --html=compatibility-test-report.html \
          --self-contained-html \
          -m "compatibility and not requires_powershell and not requires_auth"
    
    - name: 互換性テスト結果アーティファクト保存
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: compatibility-test-results
        path: |
          compatibility-test-results.xml
          compatibility-test-report.html
        retention-days: 30

  gui-tests:
    name: GUIテスト
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
    
    - name: Python 3.11 セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: システム依存関係インストール
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          x11-utils \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libegl1-mesa \
          libxkbcommon0 \
          libxkbcommon-x11-0 \
          libfontconfig1 \
          libfreetype6 \
          libx11-6 \
          libx11-xcb1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrender1 \
          libxcb1 \
          libxcb-glx0 \
          libxcb-render0 \
          libgl1-mesa-glx \
          libglib2.0-0
    
    - name: Python依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: GUIテスト実行
      run: |
        xvfb-run -a python -m pytest tests/ \
          -v \
          --tb=short \
          --junitxml=gui-test-results.xml \
          --html=gui-test-report.html \
          --self-contained-html \
          -m "gui and not requires_auth"
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99
        QT_LOGGING_RULES: '*.debug=false'
    
    - name: GUIテスト結果アーティファクト保存
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gui-test-results
        path: |
          gui-test-results.xml
          gui-test-report.html
        retention-days: 30

  windows-compatibility:
    name: Windows互換性テスト
    runs-on: windows-latest
    needs: unit-tests
    
    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
    
    - name: Python 3.11 セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: PowerShell Core インストール
      run: |
        winget install Microsoft.PowerShell
    
    - name: Python依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Windows ユニットテスト実行
      run: |
        python -m pytest tests/unit tests/compatibility \
          -v \
          --tb=short \
          --junitxml=windows-test-results.xml \
          --html=windows-test-report.html \
          --self-contained-html \
          -m "unit or compatibility and not requires_auth"
    
    - name: Windows テスト結果アーティファクト保存
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-test-results
        path: |
          windows-test-results.xml
          windows-test-report.html
        retention-days: 30

  security-scan:
    name: セキュリティスキャン
    runs-on: ubuntu-latest
    
    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
    
    - name: Python 3.11 セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: セキュリティツールインストール
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Bandit セキュリティスキャン
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
    
    - name: Safety 依存関係脆弱性スキャン
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: セキュリティスキャン結果アーティファクト保存
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 90

  code-quality:
    name: コード品質チェック
    runs-on: ubuntu-latest
    
    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
    
    - name: Python 3.11 セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: コード品質ツールインストール
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
        pip install -r requirements.txt
    
    - name: Black フォーマットチェック
      run: |
        black --check --diff src/ tests/
    
    - name: Flake8 リンティング
      run: |
        flake8 src/ tests/ --max-line-length=100 --ignore=E501,W503
    
    - name: MyPy 型チェック
      run: |
        mypy src/ --ignore-missing-imports || true

  comprehensive-report:
    name: 包括的レポート生成
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, compatibility-tests, gui-tests, security-scan, code-quality]
    if: always()
    
    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
    
    - name: Python 3.11 セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 全アーティファクトダウンロード
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Python依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: 包括的レポート生成
      run: |
        python tests/run_test_suite.py --report-only
    
    - name: 包括的レポートアーティファクト保存
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-ci-report
        path: |
          TestScripts/TestReports/comprehensive-test-report_*.html
          TestScripts/TestReports/comprehensive-test-summary_*.csv
          TestScripts/TestReports/comprehensive-test-data_*.json
        retention-days: 90

  deploy-docs:
    name: テストドキュメント公開
    runs-on: ubuntu-latest
    needs: comprehensive-report
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
    
    - name: 包括的レポートダウンロード
      uses: actions/download-artifact@v4
      with:
        name: comprehensive-ci-report
        path: docs/test-reports/
    
    - name: GitHub Pages デプロイ
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        destination_dir: test-reports