name: Python Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Tests/**'
      - 'requirements.txt'
      - 'test-requirements.txt'
      - 'pytest.ini'
      - '.github/workflows/python-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Tests/**'
      - 'requirements.txt'
      - 'test-requirements.txt'
      - 'pytest.ini'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # macOSでの一部バージョンを除外（ビルド時間短縮）
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
    
    - name: Install PowerShell Core (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # PowerShell Coreのインストール（互換性テスト用）
        wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # 構文エラーまたは未定義名をチェック
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # 複雑度の警告（max-line-length=127、max-complexity=10）
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        pip install mypy
        mypy src --ignore-missing-imports || true
    
    - name: Run unit tests
      run: |
        pytest -m "unit and not requires_auth and not requires_powershell" \
          --cov=src --cov-report=xml --cov-report=term-missing \
          --junit-xml=test-results-unit.xml -v
    
    - name: Run integration tests (without auth)
      run: |
        pytest -m "integration and not requires_auth and not requires_powershell" \
          --junit-xml=test-results-integration.xml -v
    
    - name: Run compatibility tests
      if: matrix.os == 'windows-latest' || matrix.os == 'ubuntu-latest'
      run: |
        pytest -m "compatibility and not requires_auth" \
          --junit-xml=test-results-compatibility.xml -v || true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          test-results-*.xml
          htmlcov/
    
    - name: Generate test summary
      if: always()
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "- OS: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- Python: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r src -f json -o bandit-report.json || true
        bandit -r src
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check -r requirements.txt --json --output safety-report.json || true
        safety check -r requirements.txt
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r test-requirements.txt
    
    - name: Run performance tests
      run: |
        pytest -m "performance" --benchmark-json=benchmark.json -v || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: benchmark.json