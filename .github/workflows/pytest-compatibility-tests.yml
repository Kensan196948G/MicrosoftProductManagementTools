name: Microsoft 365管理ツール - pytest互換性テスト

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Tests/**'
      - 'pytest.ini'
      - 'requirements.txt'
      - '.github/workflows/pytest-compatibility-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Tests/**'
      - 'pytest.ini'
      - 'requirements.txt'
  schedule:
    # 毎日午前2時（JST 11時）に実行
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_category:
        description: 'テストカテゴリ選択'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - compatibility
          - gui
      skip_powershell:
        description: 'PowerShell必須テストをスキップ'
        required: false
        default: false
        type: boolean
      verbose_output:
        description: '詳細出力を有効化'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POWERSHELL_VERSION: '7.5.1'

jobs:
  setup:
    name: 🔧 環境セットアップ
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
      test-category: ${{ steps.setup.outputs.test-category }}
      skip-powershell: ${{ steps.setup.outputs.skip-powershell }}
      verbose: ${{ steps.setup.outputs.verbose }}
    steps:
      - name: セットアップパラメータ決定
        id: setup
        run: |
          echo "python-version=${{ env.PYTHON_VERSION }}" >> $GITHUB_OUTPUT
          echo "test-category=${{ github.event.inputs.test_category || 'all' }}" >> $GITHUB_OUTPUT
          echo "skip-powershell=${{ github.event.inputs.skip_powershell || 'false' }}" >> $GITHUB_OUTPUT
          echo "verbose=${{ github.event.inputs.verbose_output || 'true' }}" >> $GITHUB_OUTPUT

  lint-and-format:
    name: 🔍 コード品質チェック
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Python セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
          cache: 'pip'

      - name: 依存関係インストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: コードフォーマットチェック (Black)
        run: |
          black --check --diff src/ Tests/
        continue-on-error: true

      - name: リントチェック (flake8)
        run: |
          flake8 src/ Tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ Tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: 型チェック (mypy)
        run: |
          mypy src/ --ignore-missing-imports
        continue-on-error: true

  unit-tests:
    name: 🧪 ユニットテスト
    runs-on: ${{ matrix.os }}
    needs: [setup, lint-and-format]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.11', '3.12']
        exclude:
          # Windows + Python 3.9 の組み合わせは除外（互換性問題）
          - os: windows-latest
            python-version: '3.9'
    
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Python セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: PowerShell セットアップ (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $PSVersionTable
          # PowerShell 7.5.1 がインストールされているか確認
          if ($PSVersionTable.PSVersion.Major -lt 7) {
            Write-Host "PowerShell 7.5.1 をインストールします..."
            # PowerShell 7 インストールスクリプト実行
            iex "& { $(irm https://aka.ms/install-powershell.ps1) } -UseMSI"
          }

      - name: PowerShell セットアップ (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # PowerShell 7.5.1 インストール
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh --version

      - name: 依存関係インストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: テスト環境準備
        run: |
          mkdir -p TestScripts/TestReports
          mkdir -p tests/logs
          mkdir -p tests/temp

      - name: ユニットテスト実行
        run: |
          python Tests/run_test_suite.py --category unit --verbose=${{ needs.setup.outputs.verbose }}
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: テスト結果アップロード
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            TestScripts/TestReports/unit-*
            tests/logs/
          retention-days: 30

  integration-tests:
    name: 🔗 統合テスト
    runs-on: ${{ matrix.os }}
    needs: [setup, unit-tests]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            test-timeout: 1800
          - os: windows-latest
            test-timeout: 2400
    
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Python セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
          cache: 'pip'

      - name: PowerShell セットアップ
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $PSVersionTable

      - name: PowerShell セットアップ (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 依存関係インストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: テスト環境準備
        run: |
          mkdir -p TestScripts/TestReports
          mkdir -p tests/logs
          mkdir -p tests/temp

      - name: 統合テスト実行
        timeout-minutes: 30
        run: |
          python Tests/run_test_suite.py --category integration --verbose=${{ needs.setup.outputs.verbose }}
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: テスト結果アップロード
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results-${{ matrix.os }}
          path: |
            TestScripts/TestReports/integration-*
            tests/logs/
          retention-days: 30

  compatibility-tests:
    name: 🤝 互換性テスト
    runs-on: ${{ matrix.os }}
    needs: [setup, unit-tests]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        test-type: [output-format, api-response, powershell-bridge]
    
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Python セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
          cache: 'pip'

      - name: PowerShell セットアップ
        shell: pwsh
        run: |
          $PSVersionTable
          # PowerShell モジュール確認
          Get-InstalledModule -Name Microsoft.Graph -ErrorAction SilentlyContinue
          Get-InstalledModule -Name ExchangeOnlineManagement -ErrorAction SilentlyContinue

      - name: PowerShell セットアップ (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 依存関係インストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: テスト環境準備
        run: |
          mkdir -p TestScripts/TestReports
          mkdir -p tests/logs
          mkdir -p tests/temp

      - name: 互換性テスト実行
        timeout-minutes: 45
        run: |
          python Tests/run_test_suite.py --category compatibility \
            --skip-powershell=${{ needs.setup.outputs.skip-powershell }} \
            --verbose=${{ needs.setup.outputs.verbose }}
        env:
          PYTHONPATH: ${{ github.workspace }}
          TEST_TYPE: ${{ matrix.test-type }}

      - name: テスト結果アップロード
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compatibility-test-results-${{ matrix.os }}-${{ matrix.test-type }}
          path: |
            TestScripts/TestReports/compatibility-*
            tests/logs/
            tests/temp/
          retention-days: 30

  gui-tests:
    name: 🖥️ GUIテスト
    runs-on: ${{ matrix.os }}
    needs: [setup, unit-tests]
    if: ${{ needs.setup.outputs.test-category == 'all' || needs.setup.outputs.test-category == 'gui' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Python セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
          cache: 'pip'

      - name: GUI テスト環境セットアップ (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb qt6-base-dev
          # 仮想ディスプレイ設定
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: 依存関係インストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: テスト環境準備
        run: |
          mkdir -p TestScripts/TestReports
          mkdir -p tests/logs

      - name: GUIテスト実行
        timeout-minutes: 20
        run: |
          python Tests/run_test_suite.py --category gui --verbose=${{ needs.setup.outputs.verbose }}
        env:
          PYTHONPATH: ${{ github.workspace }}
          QT_QPA_PLATFORM: offscreen
          DISPLAY: :99

      - name: GUIテストスクリーンショット
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: gui-test-screenshots-${{ matrix.os }}
          path: tests/temp/screenshots/
          retention-days: 7

      - name: テスト結果アップロード
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: gui-test-results-${{ matrix.os }}
          path: |
            TestScripts/TestReports/gui-*
            tests/logs/
          retention-days: 30

  comprehensive-tests:
    name: 🚀 包括的テスト
    runs-on: ubuntu-latest
    needs: [setup, unit-tests, integration-tests, compatibility-tests]
    if: ${{ needs.setup.outputs.test-category == 'all' }}
    
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Python セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
          cache: 'pip'

      - name: PowerShell セットアップ
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 依存関係インストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: テスト環境準備
        run: |
          mkdir -p TestScripts/TestReports
          mkdir -p tests/logs
          mkdir -p tests/temp

      - name: 包括的テスト実行
        timeout-minutes: 60
        run: |
          python Tests/run_test_suite.py --category all \
            --skip-powershell=${{ needs.setup.outputs.skip-powershell }} \
            --skip-gui=true \
            --verbose=${{ needs.setup.outputs.verbose }}
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: カバレッジレポート生成
        run: |
          coverage combine
          coverage report --show-missing
          coverage html
          coverage xml

      - name: カバレッジアップロード
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: pytest-compatibility
          name: Microsoft365-Tools-Coverage

      - name: 包括的レポートアップロード
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: comprehensive-test-results
          path: |
            TestScripts/TestReports/comprehensive-*
            htmlcov/
            tests/logs/
            coverage.xml
          retention-days: 90

  security-scan:
    name: 🔒 セキュリティスキャン
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Python セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: 依存関係セキュリティチェック
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: 依存関係脆弱性スキャン
        run: |
          safety check --json --output safety-report.json || true
          cat safety-report.json

      - name: コードセキュリティスキャン
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          cat bandit-report.json

      - name: セキュリティレポートアップロード
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30

  deploy-reports:
    name: 📊 レポート配布
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, security-scan]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: 全テスト結果ダウンロード
        uses: actions/download-artifact@v3
        with:
          path: test-results

      - name: レポート統合
        run: |
          mkdir -p public/reports
          find test-results -name "*.html" -exec cp {} public/reports/ \;
          find test-results -name "*.json" -exec cp {} public/reports/ \;
          
          # インデックスページ生成
          echo "<!DOCTYPE html><html><head><title>Microsoft 365管理ツール テストレポート</title></head><body>" > public/index.html
          echo "<h1>Microsoft 365管理ツール - テストレポート</h1>" >> public/index.html
          echo "<ul>" >> public/index.html
          for file in public/reports/*.html; do
            basename=$(basename "$file")
            echo "<li><a href=\"reports/$basename\">$basename</a></li>" >> public/index.html
          done
          echo "</ul></body></html>" >> public/index.html

      - name: GitHub Pages配布
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          destination_dir: test-reports

  notification:
    name: 📢 通知
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, security-scan, deploy-reports]
    if: always()
    
    steps:
      - name: テスト結果通知
        if: failure()
        run: |
          echo "❌ Microsoft 365管理ツール pytest互換性テストが失敗しました"
          echo "詳細: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
      - name: 成功通知
        if: success()
        run: |
          echo "✅ Microsoft 365管理ツール pytest互換性テストが成功しました"
          echo "レポート: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"