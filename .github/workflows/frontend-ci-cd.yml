name: Frontend CI/CD Pipeline - Microsoft 365 Management Tools
# React + TypeScript + Vite + Docker エンタープライズ本格運用対応

on:
  push:
    branches: [ main, develop, release/* ]
    paths: 
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests for emergency deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # 1. Code Quality & Security Check
  quality-check:
    name: Code Quality & Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: |
        npm ci --audit --fund false
        npm audit --audit-level=moderate
    
    - name: ESLint check
      working-directory: frontend
      run: |
        npm run lint -- --format=json --output-file=eslint-report.json
        npm run lint
    
    - name: TypeScript check
      working-directory: frontend
      run: npm run type-check
    
    - name: Security audit
      working-directory: frontend
      run: |
        npm audit --audit-level=moderate
        npx audit-ci --moderate
    
    - name: Upload ESLint report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-report
        path: frontend/eslint-report.json
        retention-days: 30

  # 2. Unit & Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-check
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      matrix:
        node-version: [18, 20]
        test-suite: [unit, integration, accessibility]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run ${{ matrix.test-suite }} tests
      working-directory: frontend
      run: |
        case "${{ matrix.test-suite }}" in
          unit)
            npm run test:unit -- --coverage --reporter=json --outputFile=test-results.json
            ;;
          integration)
            npm run test:integration -- --coverage --reporter=json --outputFile=integration-results.json
            ;;
          accessibility)
            npm run test:a11y -- --reporter=json --outputFile=a11y-results.json
            ;;
        esac
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}-node${{ matrix.node-version }}
        path: frontend/*-results.json
        retention-days: 30
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.test-suite == 'unit'
      with:
        directory: frontend/coverage
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  # 3. E2E Tests
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-check, test]
    if: ${{ !inputs.skip_tests }}
    
    services:
      backend:
        image: node:18-alpine
        ports:
          - 8000:8000
        options: --health-cmd="curl -f http://localhost:8000/health || exit 1" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Install Playwright
      working-directory: frontend
      run: npx playwright install --with-deps
    
    - name: Build application
      working-directory: frontend
      run: npm run build
    
    - name: Start application
      working-directory: frontend
      run: |
        npm run preview &
        sleep 10
        curl -f http://localhost:4173 || exit 1
    
    - name: Run E2E tests
      working-directory: frontend
      run: |
        npm run test:e2e -- --reporter=json --output-file=e2e-results.json
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/e2e-results.json
          frontend/test-results/
        retention-days: 30

  # 4. Performance Tests
  performance-test:
    name: Performance & Bundle Size Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Build application
      working-directory: frontend
      run: npm run build
    
    - name: Analyze bundle size
      working-directory: frontend
      run: |
        npm run analyze
        npm run bundle-size-check
    
    - name: Performance audit with Lighthouse
      working-directory: frontend
      run: |
        npm run preview &
        sleep 10
        npm run lighthouse -- --output=json --output-path=lighthouse-report.json
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          frontend/lighthouse-report.json
          frontend/bundle-analysis.json
        retention-days: 30

  # 5. Security Scanning
  security-scan:
    name: Security Vulnerability Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=frontend/package.json
    
    - name: OWASP ZAP security scan
      uses: zaproxy/action-full-scan@v0.10.0
      with:
        target: 'http://localhost:4173'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          frontend/snyk-report.json
          report_html.html
        retention-days: 30

  # 6. Build & Docker Image
  build:
    name: Build & Create Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-check, test, e2e-test, performance-test, security-scan]
    if: always() && (needs.test.result == 'success' || inputs.skip_tests)
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Build application
      working-directory: frontend
      env:
        NODE_ENV: production
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        REACT_APP_MONITORING_ENABLED: true
      run: npm run build
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: frontend
        file: frontend/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0.15.0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json
        retention-days: 30
    
    - name: Set image output
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # 7. Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: github.ref == 'refs/heads/develop' || inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        kubectl set image deployment/frontend-staging frontend=${{ needs.build.outputs.image }}
        kubectl rollout status deployment/frontend-staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        curl -f https://staging.m365tools.example.com/health || exit 1
        curl -f https://staging.m365tools.example.com/monitoring || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          Frontend deployed to staging: ${{ needs.build.outputs.image }}
          Status: ${{ job.status }}

  # 8. Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'
    
    - name: Pre-deployment checks
      run: |
        echo "Running pre-deployment checks..."
        kubectl get pods -l app=frontend-production --field-selector=status.phase=Running
        kubectl get service frontend-production
    
    - name: Blue-Green deployment
      run: |
        echo "Starting Blue-Green deployment..."
        
        # Deploy to green environment
        kubectl set image deployment/frontend-production-green frontend=${{ needs.build.outputs.image }}
        kubectl rollout status deployment/frontend-production-green --timeout=300s
        
        # Health check green environment
        kubectl wait --for=condition=ready pod -l app=frontend-production-green --timeout=300s
        
        # Switch traffic to green
        kubectl patch service frontend-production -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Wait for traffic switch
        sleep 30
        
        # Update blue environment
        kubectl set image deployment/frontend-production-blue frontend=${{ needs.build.outputs.image }}
        kubectl rollout status deployment/frontend-production-blue --timeout=300s
    
    - name: Post-deployment verification
      run: |
        echo "Running post-deployment verification..."
        curl -f https://m365tools.example.com/health || exit 1
        curl -f https://m365tools.example.com/monitoring || exit 1
        
        # Performance check
        lighthouse --chrome-flags="--headless" --output=json --output-path=prod-lighthouse.json https://m365tools.example.com
        
        # Check Core Web Vitals
        node -e "
          const report = require('./prod-lighthouse.json');
          const metrics = report.lhr.audits;
          console.log('FCP:', metrics['first-contentful-paint'].numericValue);
          console.log('LCP:', metrics['largest-contentful-paint'].numericValue);
          console.log('CLS:', metrics['cumulative-layout-shift'].numericValue);
        "
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        kubectl rollout undo deployment/frontend-production-green
        kubectl rollout undo deployment/frontend-production-blue
        kubectl patch service frontend-production -p '{"spec":{"selector":{"version":"blue"}}}'
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          🚀 Frontend deployed to production: ${{ needs.build.outputs.image }}
          Status: ${{ job.status }}
          URL: https://m365tools.example.com

  # 9. Monitoring & Alerts Setup
  setup-monitoring:
    name: Setup Monitoring & Alerts
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup monitoring dashboards
      run: |
        echo "Setting up monitoring dashboards..."
        
        # Create Grafana dashboard
        curl -X POST "${{ secrets.GRAFANA_URL }}/api/dashboards/db" \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d @frontend/monitoring/grafana-dashboard.json
        
        # Setup Prometheus alerts
        kubectl apply -f frontend/monitoring/prometheus-alerts.yaml
        
        # Configure Application Insights
        curl -X POST "${{ secrets.AZURE_MONITOR_URL }}/api/alerts" \
          -H "Authorization: Bearer ${{ secrets.AZURE_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d @frontend/monitoring/azure-alerts.json
    
    - name: Verify monitoring setup
      run: |
        echo "Verifying monitoring setup..."
        kubectl get prometheusrules frontend-alerts
        kubectl get servicemonitor frontend-monitoring

  # 10. Cleanup & Archiving
  cleanup:
    name: Cleanup & Archive Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy-staging, deploy-production, setup-monitoring]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        echo "Cleaning up old container images..."
        # Keep last 5 images
        gh api graphql -f query='
          query($owner: String!, $name: String!) {
            repository(owner: $owner, name: $name) {
              packages(first: 100, packageType: CONTAINER) {
                nodes {
                  name
                  versions(first: 100, orderBy: {field: CREATED_AT, direction: DESC}) {
                    nodes {
                      id
                      version
                      createdAt
                    }
                  }
                }
              }
            }
          }
        ' -f owner="${{ github.repository_owner }}" -f name="${{ github.event.repository.name }}" --jq '
          .data.repository.packages.nodes[] |
          select(.name | contains("frontend")) |
          .versions.nodes[5:] |
          .[] |
          .id
        ' | xargs -I {} gh api graphql -f query='
          mutation($packageVersionId: ID!) {
            deletePackageVersion(input: {packageVersionId: $packageVersionId}) {
              success
            }
          }
        ' -f packageVersionId={}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Archive deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts
        path: |
          prod-lighthouse.json
          frontend/monitoring/
        retention-days: 90
    
    - name: Generate deployment report
      run: |
        echo "# Deployment Report" > deployment-report.md
        echo "## Build Information" >> deployment-report.md
        echo "- Image: ${{ needs.build.outputs.image }}" >> deployment-report.md
        echo "- Digest: ${{ needs.build.outputs.digest }}" >> deployment-report.md
        echo "- Commit: ${{ github.sha }}" >> deployment-report.md
        echo "- Branch: ${{ github.ref_name }}" >> deployment-report.md
        echo "- Deploy Time: $(date -u)" >> deployment-report.md
        echo "## Test Results" >> deployment-report.md
        echo "- Quality Check: ${{ needs.quality-check.result }}" >> deployment-report.md
        echo "- Unit Tests: ${{ needs.test.result }}" >> deployment-report.md
        echo "- E2E Tests: ${{ needs.e2e-test.result }}" >> deployment-report.md
        echo "- Performance Tests: ${{ needs.performance-test.result }}" >> deployment-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> deployment-report.md
        echo "## Deployment Status" >> deployment-report.md
        echo "- Staging: ${{ needs.deploy-staging.result }}" >> deployment-report.md
        echo "- Production: ${{ needs.deploy-production.result }}" >> deployment-report.md
        echo "- Monitoring: ${{ needs.setup-monitoring.result }}" >> deployment-report.md
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-report.md
        retention-days: 365

# Workflow completion notification
on_workflow_completion:
  runs-on: ubuntu-latest
  needs: [cleanup]
  if: always()
  
  steps:
  - name: Workflow completion notification
    uses: 8398a7/action-slack@v3
    with:
      status: custom
      custom_payload: |
        {
          "text": "Frontend CI/CD Pipeline Completed",
          "attachments": [
            {
              "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                },
                {
                  "title": "Status",
                  "value": "${{ job.status }}",
                  "short": true
                }
              ]
            }
          ]
        }
      webhook_url: ${{ secrets.SLACK_WEBHOOK }}